#-------------------------------------------------------------------------------
# Copyright (c) 2014 Ren√© Just, Darioush Jalali, and Defects4J contributors.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#-------------------------------------------------------------------------------

=pod

=head1 NAME

d4j-mutation -- Perform mutation analysis on a checked-out project version.

=head1 SYNOPSIS

d4j-mutation [-w work_dir]

=head1 OPTIONS

=over 4

=item B<-w F<work_dir>>

The working directory of the checked-out project version (optional). Default is
the current directory.

=back

=head1 DESCRIPTION

This script performs mutation analysis for all accompanying tests of a 
checked-out project version.

=cut

use strict;
use warnings;

use Constants;
use Utils;
use Project;
use Getopt::Std;

#
# Issue usage message and quit
#
sub _usage {
    print "usage: $0 [-w work_dir]\n";
    exit 1;
}

my %cmd_opts;
getopts('w:', \%cmd_opts) or _usage();

my $WORK_DIR = $cmd_opts{w} // ".";
# TODO: Implement handling of relative paths in core module
$WORK_DIR = `readlink -m $WORK_DIR | tr -d '\n'`;

my $config = Utils::read_config_file("$WORK_DIR/$CONFIG");
unless(defined $config) {
    print(STDERR "$WORK_DIR is not a valid working directory!\n");
    exit 1;
}

# TODO remove triggering test if we compute mutation score for the buggy version?
if ($config->{$CONFIG_VID} =~ /^(\d+)b$/) {
    print(STDERR "Mutation analysis on buggy program version not (yet) supported!\n");
    exit 1;
}


# Instantiate project and set working directory
my $project = Project::create_project($config->{$CONFIG_PID});
$project->{prog_root} = $WORK_DIR;


# Create mutation definitions (mml file)
my $mml_dir = "$WORK_DIR/mml";
my $class_dir = "$SCRIPT_DIR/projects/$config->{$CONFIG_PID}/modified_classes";

$config->{$CONFIG_VID} =~ /^(\d+)[bf]$/ 
    or die "Unexpected version id format (\\d+[bf]): $config->{$CONFIG_VID}";
my $vid = $1;
system("$UTIL_DIR/create_mml.pl -p $config->{$CONFIG_PID} -c $class_dir -o $mml_dir -v $vid");
my $mml_file = "$mml_dir/$vid.mml.bin";
-e $mml_file or die "Mml file does not exist: $mml_file!";

# Mutate and compile sources
$ENV{MML} = $mml_file;
$project->mutate() > 0 or die "Cannot mutate project!";

# Compile tests
$project->compile_tests() == 0 or die "Cannot compile tests!";

# Perform mutation analysis
my $tmp = "$WORK_DIR/.mutation.log";
# Be default we do not exclude any mutants
system("touch $WORK_DIR/exclude.txt") unless -e "$WORK_DIR/exclude.txt";
if ($project->mutation_analysis($tmp) != 0) {
    system("cat $tmp");
    exit 1;
}
open(RES, "<$WORK_DIR/summary.csv") or die "Cannot read mutation analysis result file $!";
my $header = <RES>;
my $line = <RES>;
close(RES); 
my ($mutGen, $mutCov, $mutKill, $mutLive, $timePreproc, $timeAnalysis) = split(/,/, $line);
printf("%17s: %d\n", "Mutants generated", $mutGen);
printf("%17s: %d\n", "Mutants covered", $mutCov);
printf("%17s: %d\n", "Mutants killed", $mutKill);
printf("%17s: %.1f%% (%.1f%%)\n", "Mutation score", $mutKill/$mutCov*100, $mutKill/$mutGen*100);
printf("%17s: %.1f seconds\n", "Total run time", ($timePreproc+$timeAnalysis));

1;

=pod

=head1 AUTHORS

Rene Just

=head1 SEE ALSO

All valid project_ids are listed in F<Project.pm>

=cut
