<project name="Chart"  basedir="${basedir}">

    <!-- script.dir property has to be provided from caller! -->
    <fail message="Property script.dir not set!" unless="script.dir" />
    
    <property name="junit.jar" value="${script.dir}/projects/lib/junit-4.11.jar"/>

    <!-- Include existing project build file -->
    <import file="${basedir}/ant/build.xml" />

    <!-- Import overall biuld files for mutation targets -->
    <import file="../project.build.xml" />

    <!-- Additional properties such as tests to exclude (exclude.list).
         This property file is automatically generated if necessary. -->
    <property file="${basedir}/local.build.properties"/> 

    <!-- Classpath to run mutation analysis --> 
    <path id="major.classpath">
        <pathelement location="${basedir}/build"/>
        <pathelement location="${basedir}/build-tests"/>
    </path>


    <!-- Values necessary for mutation scripting to work -->
    <property name="test.home" value="${basedir}/build-tests" />
    <property name="build.home" value="${basedir}" />
    <property name="classes.dir" value="${basedir}/build" />
    <path id="compile.classpath" refid="build.classpath" />
    <path id="test.classpath">
        <path refid="build.classpath"/>
        <pathelement location="${junit.jar}"/>
        <pathelement location="${classes.dir}" />
        <pathelement location="${basedir}/build-tests"/>
    </path>

    <!-- target used for compiling sources. This was replicated to avoid deleting the compilation directory -->
    <target name="compile" depends="initialise"
            description="Compile the JFreeChart source code.">

        <!-- create a temp build directory -->
        <mkdir dir="${basedir}/build" />

        <javac srcdir="${basedir}/source" 
               destdir="${basedir}/build"
               debug="on"
               deprecation="false"
               source="1.4"
               target="1.4">
            <classpath refid="build.classpath" />
            <include name="org/jfree/**"/>
        </javac>

        <!-- copy across gorilla.jpg -->
        <copy file="${basedir}/source/org/jfree/chart/gorilla.jpg" tofile="${basedir}/build/org/jfree/chart/gorilla.jpg" />

        <!-- copy across .properties files -->
        <copy todir="${basedir}/build/org/jfree/chart/">
            <fileset dir="${basedir}/source/org/jfree/chart">
                <include name="*.properties" />
            </fileset>
        </copy>
        <copy todir="${basedir}/build/org/jfree/chart/plot">
            <fileset dir="${basedir}/source/org/jfree/chart/plot">
                <include name="*.properties" />
            </fileset>
        </copy>
        <copy todir="${basedir}/build/org/jfree/chart/editor">
            <fileset dir="${basedir}/source/org/jfree/chart/editor">
                <include name="*.properties" />
            </fileset>
        </copy>
        <copy todir="${basedir}/build/org/jfree/chart/ui">
            <fileset dir="${basedir}/source/org/jfree/chart/ui">
                <include name="*.properties" />
            </fileset>
        </copy>
    </target>


    <!-- Compile the experimental classes.  This was replicated to avoid deleting the compilation directory --> 
    <target name="compile-experimental" depends="compile" 
            description="Compile the JFreeChart experimental classes"> 

        <!-- create a temp build directory -->
        <mkdir dir="${basedir}/build" />

        <path id="build.experimental.classpath">
            <pathelement location="${servlet.jar}"/>
        </path>

        <!-- compile the source -->
        <javac srcdir="${basedir}/experimental" 
               destdir="${basedir}/build"
               debug="on"
               deprecation="false"
               source="1.4"
               target="1.4">
            <classpath refid="build.experimental.classpath" />
            <include name="org/jfree/experimental/**"/>
            <exclude name="org/jfree/experimental/**/junit/*"/>
        </javac>
    </target>


    <!-- dummy target, used to rename -->
    <target name="compile.tests" depends="compile, compile-experimental"> 
         <mkdir dir="${basedir}/build-tests"/>
        <javac srcdir="${basedir}/tests" 
               destdir="${basedir}/build-tests" 
               source="1.4"
               target="1.4" 
               debug="true" 
               deprecation="false"
               optimize="false">
            <classpath>
                <path refid="build.classpath"/>
                <pathelement location="${junit.jar}"/>
                <pathelement location="${classes.dir}" />
                <pathelement location="${basedir}/build-tests"/>
            </classpath>
        </javac>
 
    </target>


    <!-- RUN THE JUNIT TESTS. -->
    <target name="test" 
            depends="compile.tests"
            description="Run the test cases">

        <junit printSummary="yes" 
               haltonerror="no" haltonfailure="no" fork="no" 
               dir="${basedir}">

            <sysproperty key="basedir" value="${basedir}"/>
            <classpath>
                <pathelement path="${formatter_cp}" />
            </classpath>

            <sysproperty key="OUTFILE" value="${OUTFILE}"/>

            <formatter classname="edu.washington.cs.mut.testrunner.Formatter" usefile="false" />
            <test name="${test.entry.class}" methods="${test.entry.method}" if="test.entry.class"/>

            <classpath>
                <path refid="build.classpath"/>
				<path refid="cobertura.classpath.include" />
                <pathelement location="${junit.jar}"/>
                <pathelement location="${classes.dir}" />
                <pathelement location="${basedir}/build-tests"/>
            </classpath>

            <batchtest unless="test.entry.class">
                <fileset dir="${basedir}/tests" excludes="${exclude.list}">
                    <include name="**/*Tests.java"/>
                    <exclude name="**/*Package*.java"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

<!-- 
    Run individual test and monitor class loader
    Test has to be provided as property "test.entry" (class::method)
    and the output is redirected to "test.output"
    --> 
        <target name="monitor.test" depends="initialise" description="Run unit test and monitor class loader">
        <java fork="true" classname="edu.washington.cs.mut.testrunner.SingleTestRunner" output="${test.output}"
            failonerror="true">

            <arg value="${test.entry}"/>     
            <jvmarg value="-verbose:class"/>     
            <classpath refid="major.classpath"/>
            <classpath>
                <pathelement location="${junit.jar}"/>
                <pathelement path="${formatter_cp}" />
            </classpath>
        </java>        
    </target>

<!-- 
    Run mutation analysis 
--> 
    <target name="mutation.test" >
        <!-- Test a generated test suite -->                      
        <if><isset property="test.include"/>                   
            <then>                                             
                <fileset id="major.tests" dir="${bug-db.test.dir}">
                    <include name="**/${test.include}"/>          
                    <exclude name="**/WashingtonSuite.java"/>          
                </fileset>                                     
            </then>                                            
            <else>                                             
                <!-- Test existing test suite -->
                <fileset id="major.tests" dir="${basedir}/tests" excludes="${exclude.list}">
                    <include name="**/*Tests.java"/>
                    <exclude name="**/*Package*.java"/>
                </fileset>                                     
            </else>                                            
        </if>                     
        <!-- Call mutation test target with fileset and classpath -->
        <antcall target="major.test" inheritRefs="true">          
            <reference refid="major.tests"/>                   
            <reference refid="major.classpath"/>               
        </antcall>                                             
    </target> 
</project>
