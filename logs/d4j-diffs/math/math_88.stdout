org.apache.commons.math.optimization.linear.SimplexTableau

326c326,329
<         double mostNegative = getDecisionVariableValue(getOriginalNumDecisionVariables());
---
>         Integer basicRow =
>             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());
>         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
>         Set<Integer> basicRows = new HashSet<Integer>();
327a331,337
>             basicRow = getBasicRow(getNumObjectiveFunctions() + i);
>             if (basicRows.contains(basicRow)) {
>                 // if multiple variables can take a given value 
>                 // then we choose the first and set the rest equal to 0
>                 coefficients[i] = 0;
>             } else {
>                 basicRows.add(basicRow);
329,352c339,340
<                 getDecisionVariableValue(i) - (restrictToNonNegative ? 0 : mostNegative); 
<         }
<         return new RealPointValuePair(coefficients, f.getValue(coefficients));
<     }
< 
<     /**
<      * Get the value of the given decision variable.  This is not the actual
<      * value as it is guaranteed to be >= 0 and thus must be corrected before
<      * being returned to the user.
<      * 
<      * @param decisionVariable The index of the decision variable
<      * @return The value of the given decision variable.
<      */
<     protected double getDecisionVariableValue(final int decisionVariable) {
<       int col = getNumObjectiveFunctions() + decisionVariable;  
<       Integer basicRow = getBasicRow(col);
<       if (basicRow == null) {
<           return 0;
<       }
<       // if there are multiple variables that can take the value on the RHS
<       // then we'll give the first variable that value
<       for (int i = getNumObjectiveFunctions(); i < col; i++) {
<           if (tableau.getEntry(basicRow, i) == 1) {
<               return 0;
---
>                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
>                     (restrictToNonNegative ? 0 : mostNegative);
355c343
<       return getEntry(basicRow, getRhsOffset()); 
---
>         return new RealPointValuePair(coefficients, f.getValue(coefficients));


