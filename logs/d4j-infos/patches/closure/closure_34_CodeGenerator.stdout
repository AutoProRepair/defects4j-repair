103,104d102
<       addExpr(first, p, context);
<       cc.addOp(opstr, true);
114a113,114
>         addExpr(first, p, context);
>         cc.addOp(opstr, true);
117a118,119
>         addExpr(first, p, context);
>         cc.addOp(opstr, true);
120c122
<         addExpr(last, p + 1, rhsContext);
---
>         unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
221,240c223
< 
<         // We could use addList recursively here, but sometimes we produce
<         // very deeply nested commas and run out of stack space, so we
<         // just unroll the recursion.
<         //
<         // We assume COMMA nodes are left-recursive.
<         Node firstNonComma = n.getFirstChild();
<         while (firstNonComma.getType() == Token.COMMA) {
<           firstNonComma = firstNonComma.getFirstChild();
<         }
< 
<         addExpr(firstNonComma, 0, context);
< 
<         Node current = firstNonComma;
<         do {
<           current = current.getParent();
<           cc.listSeparator();
<           addExpr(current.getFirstChild().getNext(), 0, Context.OTHER);
<         } while (current != n);
< 
---
>         unrollBinaryOperator(n, Token.COMMA, ",", context, Context.OTHER, 0, 0);
748a732,756
>   /**
>    * We could use addList recursively here, but sometimes we produce
>    * very deeply nested operators and run out of stack space, so we
>    * just unroll the recursion when possible.
>    *
>    * We assume nodes are left-recursive.
>    */
>   private void unrollBinaryOperator(
>       Node n, int op, String opStr, Context context,
>       Context rhsContext, int leftPrecedence, int rightPrecedence) {
>     Node firstNonOperator = n.getFirstChild();
>     while (firstNonOperator.getType() == op) {
>       firstNonOperator = firstNonOperator.getFirstChild();
>     }
> 
>     addExpr(firstNonOperator, leftPrecedence, context);
> 
>     Node current = firstNonOperator;
>     do {
>       current = current.getParent();
>       cc.addOp(opStr, true);
>       addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
>     } while (current != n);
>   }
> 
