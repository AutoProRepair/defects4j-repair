145a146,147
>         return optimize(f, goal, min, max, min + 0.5 * (max - min));
>     }
146a149,153
>     /** {@inheritDoc} */
>     public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goal,
>                                                  final double min, final double max,
>                                                  final double startValue)
>         throws FunctionEvaluationException {
153,157c160,161
<                 final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
<                 final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
<                 optima[i] = optimizer.optimize(f, goal,
<                                                FastMath.min(bound1, bound2),
<                                                FastMath.max(bound1, bound2));
---
>                 final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);
>                 optima[i] = optimizer.optimize(f, goal, min, max, s);
180,189d183
<     /** {@inheritDoc} */
<     public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goalType,
<                                                  final double min, final double max,
<                                                  final double startValue)
<             throws FunctionEvaluationException {
<         // XXX Main code should be here, using "startValue" for the first start.
<         // XXX This method should set "startValue" to min + 0.5 * (max - min)
<         return optimize(f, goalType, min, max);
<     }
< 
