org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset

123,124c123,126
<      * @param rowKey  the row key.
<      * @param columnKey  the column key.
---
>      * @param rowKey  the row key (<code>null</code> not permitted).
>      * @param columnKey  the column key (<code>null</code> not permitted).
>      * 
>      * @see #add(BoxAndWhiskerItem, Comparable, Comparable)
127,128c129,130
<         BoxAndWhiskerItem item 
<             = BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(list);
---
>         BoxAndWhiskerItem item = BoxAndWhiskerCalculator
>                 .calculateBoxAndWhiskerStatistics(list);
137,138c139,142
<      * @param rowKey  the row key.
<      * @param columnKey  the column key.
---
>      * @param rowKey  the row key (<code>null</code> not permitted).
>      * @param columnKey  the column key (<code>null</code> not permitted).
>      * 
>      * @see #add(List, Comparable, Comparable)
140,141c144
<     public void add(BoxAndWhiskerItem item, 
<                     Comparable rowKey, 
---
>     public void add(BoxAndWhiskerItem item, Comparable rowKey, 
149,155c152,155
<         if (this.maximumRangeValueRow == r 
<                 && this.maximumRangeValueColumn == c) {
<             this.maximumRangeValue = Double.NaN;
<         }
<         if (this.minimumRangeValueRow == r 
<                 && this.minimumRangeValueColumn == c) {
<             this.minimumRangeValue = Double.NaN;
---
>         if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn 
>                 == c) || (this.minimumRangeValueRow == r 
>                 && this.minimumRangeValueColumn == c))  {
>             updateBounds();
157c157
<         
---
>         else {
188a189
>         }
192d192
< 
734a735,780
>     }
>     
>     /**
>      * Resets the cached bounds, by iterating over the entire dataset to find
>      * the current bounds.
>      */
>     private void updateBounds() {
>         this.minimumRangeValue = Double.NaN;
>         this.minimumRangeValueRow = -1;
>         this.minimumRangeValueColumn = -1;
>         this.maximumRangeValue = Double.NaN;
>         this.maximumRangeValueRow = -1;
>         this.maximumRangeValueColumn = -1;
>         int rowCount = getRowCount();
>         int columnCount = getColumnCount();
>         for (int r = 0; r < rowCount; r++) {
>             for (int c = 0; c < columnCount; c++) {
>                 BoxAndWhiskerItem item = getItem(r, c);
>                 if (item != null) {
>                     Number min = item.getMinOutlier();
>                     if (min != null) {
>                         double minv = min.doubleValue();
>                         if (!Double.isNaN(minv)) {
>                             if (minv < this.minimumRangeValue || Double.isNaN(
>                                     this.minimumRangeValue)) {
>                                 this.minimumRangeValue = minv;
>                                 this.minimumRangeValueRow = r;
>                                 this.minimumRangeValueColumn = c;
>                             }
>                         }
>                     }
>                     Number max = item.getMaxOutlier();
>                     if (max != null) {
>                         double maxv = max.doubleValue();
>                         if (!Double.isNaN(maxv)) {
>                             if (maxv > this.maximumRangeValue || Double.isNaN(
>                                     this.maximumRangeValue)) {
>                                 this.maximumRangeValue = maxv;
>                                 this.maximumRangeValueRow = r;
>                                 this.maximumRangeValueColumn = c;
>                             }
>                         }
>                     }
>                 }
>             }
>         }


