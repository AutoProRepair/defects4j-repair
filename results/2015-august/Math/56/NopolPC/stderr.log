Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8
java.lang.RuntimeException: java.util.concurrent.TimeoutException
	at xxl.java.junit.TestSuiteExecution.executionResult(TestSuiteExecution.java:100)
	at xxl.java.junit.TestSuiteExecution.runTestCase(TestSuiteExecution.java:41)
	at xxl.java.junit.TestSuiteExecution.runTestCases(TestSuiteExecution.java:84)
	at fr.inria.lille.repair.nopol.synth.ConstraintModelBuilder.buildFor(ConstraintModelBuilder.java:74)
	at fr.inria.lille.repair.nopol.synth.DefaultSynthesizer.buildPatch(DefaultSynthesizer.java:72)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:178)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:120)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:90)
	at fr.inria.lille.repair.nopol.NoPolLauncher.launch(NoPolLauncher.java:85)
	at fr.inria.lille.repair.Main.main(Main.java:59)
Caused by: java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:201)
	at xxl.java.junit.TestSuiteExecution.executionResult(TestSuiteExecution.java:93)
	... 9 more
java.lang.RuntimeException: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at com.sun.tools.javac.main.Main.compile(Main.java:475)
	at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:132)
	at xxl.java.compiler.DynamicClassCompiler.runCompilationTask(DynamicClassCompiler.java:88)
	at xxl.java.compiler.DynamicClassCompiler.javaBytecodeFor(DynamicClassCompiler.java:63)
	at fr.inria.lille.commons.spoon.SpoonedFile.compilationFor(SpoonedFile.java:177)
	at fr.inria.lille.commons.spoon.SpoonedFile.compileModelledClasses(SpoonedFile.java:154)
	at fr.inria.lille.commons.spoon.SpoonedFile.processModelledClasses(SpoonedFile.java:138)
	at fr.inria.lille.commons.spoon.SpoonedFile.process(SpoonedFile.java:128)
	at fr.inria.lille.commons.spoon.SpoonedFile.process(SpoonedFile.java:124)
	at fr.inria.lille.repair.nopol.synth.SynthesizerFactory.getFor(SynthesizerFactory.java:73)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:157)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:120)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:90)
	at fr.inria.lille.repair.nopol.NoPolLauncher.launch(NoPolLauncher.java:85)
	at fr.inria.lille.repair.Main.main(Main.java:59)
Caused by: java.lang.OutOfMemoryError: GC overhead limit exceeded
	at com.sun.tools.javac.file.ZipFileIndex$DirectoryEntry.getEntry(ZipFileIndex.java:770)
	at com.sun.tools.javac.file.ZipFileIndex$DirectoryEntry.access$100(ZipFileIndex.java:701)
	at com.sun.tools.javac.file.ZipFileIndex.getZipIndexEntry(ZipFileIndex.java:239)
	at com.sun.tools.javac.file.ZipFileIndexArchive.getFileObject(ZipFileIndexArchive.java:75)
	at com.sun.tools.javac.file.JavacFileManager.listArchive(JavacFileManager.java:328)
	at com.sun.tools.javac.file.JavacFileManager.listContainer(JavacFileManager.java:375)
	at com.sun.tools.javac.file.JavacFileManager.list(JavacFileManager.java:644)
	at javax.tools.ForwardingJavaFileManager.list(ForwardingJavaFileManager.java:77)
	at xxl.java.compiler.VirtualFileObjectManager.list(VirtualFileObjectManager.java:56)
	at com.sun.tools.javac.api.ClientCodeWrapper$WrappedJavaFileManager.list(ClientCodeWrapper.java:212)
	at com.sun.tools.javac.jvm.ClassReader.fillIn(ClassReader.java:2446)
	at com.sun.tools.javac.jvm.ClassReader.complete(ClassReader.java:2143)
	at com.sun.tools.javac.code.Symbol.complete(Symbol.java:421)
	at com.sun.tools.javac.code.Symbol$PackageSymbol.flags(Symbol.java:662)
	at com.sun.tools.javac.comp.Attr.visitSelect(Attr.java:2343)
	at com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:1677)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:431)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:418)
	at com.sun.tools.javac.comp.Attr.visitSelect(Attr.java:2247)
	at com.sun.tools.javac.tree.JCTree$JCFieldAccess.accept(JCTree.java:1677)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:431)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:418)
	at com.sun.tools.javac.comp.Attr.attribType(Attr.java:473)
	at com.sun.tools.javac.comp.Attr.attribType(Attr.java:466)
	at com.sun.tools.javac.comp.Attr.visitTypeApply(Attr.java:2885)
	at com.sun.tools.javac.tree.JCTree$JCTypeApply.accept(JCTree.java:1866)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:431)
	at com.sun.tools.javac.comp.Attr.attribTree(Attr.java:418)
	at com.sun.tools.javac.comp.Attr.attribType(Attr.java:473)
	at com.sun.tools.javac.comp.Attr.attribType(Attr.java:466)
	at com.sun.tools.javac.comp.Attr.attribBase(Attr.java:635)
	at com.sun.tools.javac.comp.MemberEnter.complete(MemberEnter.java:914)
Exception in thread "main" java.lang.OutOfMemoryError: GC overhead limit exceeded
	at java.lang.StringCoding$StringDecoder.decode(StringCoding.java:149)
	at java.lang.StringCoding.decode(StringCoding.java:193)
	at java.lang.String.<init>(String.java:416)
	at java.lang.String.<init>(String.java:481)
	at java.io.UnixFileSystem.list(Native Method)
	at java.io.File.list(File.java:1116)
	at java.io.File.listFiles(File.java:1201)
	at spoon.support.compiler.FileSystemFolder.getSubFolders(FileSystemFolder.java:78)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:103)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:104)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:104)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:104)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:104)
	at spoon.support.compiler.FileSystemFolder.getAllJavaFiles(FileSystemFolder.java:104)
	at spoon.support.StandardEnvironment.verifySourceClasspath(StandardEnvironment.java:421)
	at spoon.support.StandardEnvironment.setSourceClasspath(StandardEnvironment.java:404)
	at spoon.support.compiler.jdt.JDTBasedSpoonCompiler.setSourceClasspath(JDTBasedSpoonCompiler.java:922)
	at fr.inria.lille.commons.spoon.util.SpoonModelLibrary.modelFor(SpoonModelLibrary.java:50)
	at fr.inria.lille.commons.spoon.SpoonedFile.<init>(SpoonedFile.java:50)
	at fr.inria.lille.commons.spoon.SpoonedClass.<init>(SpoonedClass.java:13)
	at fr.inria.lille.commons.spoon.SpoonedProject.forked(SpoonedProject.java:42)
	at fr.inria.lille.repair.nopol.synth.SynthesizerFactory.getFor(SynthesizerFactory.java:68)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:157)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:120)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:90)
	at fr.inria.lille.repair.nopol.NoPolLauncher.launch(NoPolLauncher.java:85)
	at fr.inria.lille.repair.Main.main(Main.java:59)

real	29m36.636s
user	205m43.403s
sys	1m5.284s
