{
    "FailingTestCase": "19", 
    "FailingTestCaseExecution": "121", 
    "InmutatedGen": "11", 
    "NotAppliedOp": "0", 
    "OfAppliedOp": "220", 
    "RegressionTestCases": "2059", 
    "RegressionTestExecution": "1", 
    "RightCompilation": "120", 
    "WrongCompilation": "100", 
    "date": "Thu Aug 13 22:15:09 CEST 2015\n\n", 
    "gen": "220", 
    "gens": "906", 
    "node": "griffon-23.nancy.grid5000.fr", 
    "operations": [
        {
            "buggyStatement": "if ((g0Positive) ^ (gb >= 0)) {\n\tif ((ga * gb) > 0) {\n\t\tfinal double epsilon = (forward ? 0.25 : -0.25) * (convergence);\n\t\tfor (int k = 0 ; (k < 4) && ((ga * gb) > 0) ; ++k) {\n\t\t\tta += epsilon;\n\t\t\tinterpolator.setInterpolatedTime(ta);\n\t\t\tga = handler.g(ta, interpolator.getInterpolatedState());\n\t\t}\n\t\tif ((ga * gb) > 0) {\n\t\t\tthrow org.apache.commons.math.MathRuntimeException.createInternalError(null);\n\t\t} \n\t} \n\tincreasing = gb >= ga;\n\tfinal org.apache.commons.math.analysis.UnivariateRealFunction f = new org.apache.commons.math.analysis.UnivariateRealFunction() {\n\t\tpublic double value(final double t) throws org.apache.commons.math.FunctionEvaluationException {\n\t\t\ttry {\n\t\t\t\tinterpolator.setInterpolatedTime(t);\n\t\t\t\treturn handler.g(t, interpolator.getInterpolatedState());\n\t\t\t} catch (org.apache.commons.math.ode.DerivativeException e) {\n\t\t\t\tthrow new org.apache.commons.math.FunctionEvaluationException(e , t);\n\t\t\t} catch (org.apache.commons.math.ode.events.EventException e) {\n\t\t\t\tthrow new org.apache.commons.math.FunctionEvaluationException(e , t);\n\t\t\t}\n\t\t}\n\t};\n\tfinal org.apache.commons.math.analysis.solvers.BrentSolver solver = new org.apache.commons.math.analysis.solvers.BrentSolver();\n\tsolver.setAbsoluteAccuracy(convergence);\n\tsolver.setMaximalIterationCount(maxIterationCount);\n\tfinal double root = ta <= tb ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n\tif (((java.lang.Math.abs((root - ta))) <= (convergence)) && ((java.lang.Math.abs((root - (previousEventTime)))) <= (convergence))) {\n\t\tta = tb;\n\t\tga = gb;\n\t} else if ((java.lang.Double.isNaN(previousEventTime)) || ((java.lang.Math.abs(((previousEventTime) - root))) > (convergence))) {\n\t\tpendingEventTime = root;\n\t\tif ((pendingEvent) && ((java.lang.Math.abs((t1 - (pendingEventTime)))) <= (convergence))) {\n\t\t\treturn false;\n\t\t} \n\t\tpendingEvent = true;\n\t\treturn true;\n\t} \n} else {\n\tta = tb;\n\tga = gb;\n}", 
            "generation": 220, 
            "patch": "if ((pendingEvent) && ((java.lang.Math.abs((t1 - (pendingEventTime)))) <= (convergence))) {\n\treturn false;\n} ", 
            "patchLocation": {
                "className": "org.apache.commons.math.ode.events.EventState", 
                "line": 188
            }, 
            "type": "INSERT_BEFORE", 
            "variant": 440
        }
    ], 
    "ops": "0", 
    "patches": "1", 
    "programVariant": "440", 
    "timeEvaluation": "1191036", 
    "timeTotal": "1232376", 
    "unfinishValidation": "0"
}