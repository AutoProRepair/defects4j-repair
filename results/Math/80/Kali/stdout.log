export PATH="/home/tdurieux/defects4j/framework/bin:$PATH";export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;export PATH="/usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/:$PATH";cp -r /home/tdurieux/projects/math/math_80 /tmp/math_80_Kali;cd /tmp/math_80_Kali;defects4j compile;mkdir lib/;cp -r /home/tdurieux/defects4j/framework/projects/lib/* lib/;cp -r /home/tdurieux/defects4j/framework/projects/Math/lib/* lib/;find . -type f -name "package-info.java" -delete;
/home/tdurieux/defects4j-repair/src/python/core/../../../results/Math/80/Kali/result
cd /tmp/math_80_Kali;export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8;export PATH="/usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/:$PATH";time java  -cp /home/tdurieux/defects4j-repair/src/python/core/../../..//libs/astor.jar fr.inria.main.evolution.MainjGenProg -mode statement-remove -location . -dependencies lib/ -failing org.apache.commons.math.linear.EigenDecompositionImplTest: -package org.apache.commons -jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ -javacompliancelevel 5 -maxgen 1000000 -seed 10 -maxtime 60  -scope local  -stopfirst true -flthreshold 0 -population 1 -srcjavafolder src/main/java/ -srctestfolder src/test/java/ -binjavafolder target/classes/ -bintestfolder target/test-classes/;echo "

Node: `hostname`
";echo "
Date: `date`
";rm -rf /tmp/math_80_Kali;

End Repair Loops: Found solution
Solution stored at: ./outputMutation//MainjGenProg-.//src/

Number solutions:12
f (sol): 0.0, [Variant id: 29 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 30 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 31 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 32 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 33 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 35 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 36 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 37 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 212 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 400 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 401 (SOL) , #gens: 903, #ops: 1, parent:1]
f (sol): 0.0, [Variant id: 403 (SOL) , #gens: 903, #ops: 1, parent:1]

All variants:
f 1.0, [Variant id: 1, #gens: 903, #ops: 0, parent:-]

Solution details
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtReturnImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtReturnImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtReturnImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtReturnImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtReturnImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtReturnImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtReturnImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtReturnImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtReturnImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtReturnImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtReturnImpl (CtIfImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtReturnImpl != RootElement)null
warning: ignoring inconsistent parent for CtCodeSnippetExpressionImpl (CtIfImpl != RootElement)null

 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 29
 
operation: INSERT_BEFORE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1135
original statement= int j = (4 * n) - 1
fixed statement= if (true)
	return false;

generation= 1
ingredientScope= -
 
 ----
ProgramVariant 30
 
operation: DELETE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1136
original statement= for (int i = 0 ; i < j ; i += 4) {
	for (int k = 0 ; k < 4 ; k += step) {
		final double tmp = work[(i + k)];
		work[(i + k)] = work[(j - k)];
		work[(j - k)] = tmp;
	}
	j -= 4;
}
fixed statement= for (int i = 0 ; i < j ; i += 4) {
	for (int k = 0 ; k < 4 ; k += step) {
		final double tmp = work[(i + k)];
		work[(i + k)] = work[(j - k)];
		work[(j - k)] = tmp;
	}
	j -= 4;
}
generation= 1
ingredientScope= -
 
 ----
ProgramVariant 31
 
operation: INSERT_BEFORE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1136
original statement= for (int i = 0 ; i < j ; i += 4) {
	for (int k = 0 ; k < 4 ; k += step) {
		final double tmp = work[(i + k)];
		work[(i + k)] = work[(j - k)];
		work[(j - k)] = tmp;
	}
	j -= 4;
}
fixed statement= if (true)
	return false;

generation= 1
ingredientScope= -
 
 ----
ProgramVariant 32
 
operation: DELETE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1137
original statement= for (int k = 0 ; k < 4 ; k += step) {
	final double tmp = work[(i + k)];
	work[(i + k)] = work[(j - k)];
	work[(j - k)] = tmp;
}
fixed statement= for (int k = 0 ; k < 4 ; k += step) {
	final double tmp = work[(i + k)];
	work[(i + k)] = work[(j - k)];
	work[(j - k)] = tmp;
}
generation= 1
ingredientScope= -
 
 ----
ProgramVariant 33
 
operation: INSERT_BEFORE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1137
original statement= for (int k = 0 ; k < 4 ; k += step) {
	final double tmp = work[(i + k)];
	work[(i + k)] = work[(j - k)];
	work[(j - k)] = tmp;
}
fixed statement= if (true)
	return false;

generation= 1
ingredientScope= -
 
 ----
ProgramVariant 35
 
operation: INSERT_BEFORE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1138
original statement= final double tmp = work[(i + k)]
fixed statement= if (true)
	return false;

generation= 1
ingredientScope= -
 
 ----
ProgramVariant 36
 
operation: DELETE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1139
original statement= work[(i + k)] = work[(j - k)]
fixed statement= work[(i + k)] = work[(j - k)]
generation= 1
ingredientScope= -
 
 ----
ProgramVariant 37
 
operation: INSERT_BEFORE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1139
original statement= work[(i + k)] = work[(j - k)]
fixed statement= if (true)
	return false;

generation= 1
ingredientScope= -
 
 ----
ProgramVariant 212
 
operation: DELETE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 840
original statement= flipIfWarranted(n, 2)
fixed statement= flipIfWarranted(n, 2)
generation= 1
ingredientScope= -
 
 ----
ProgramVariant 400
 
operation: DELETE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1133
original statement= if ((1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])) {
	int j = (4 * n) - 1;
	for (int i = 0 ; i < j ; i += 4) {
		for (int k = 0 ; k < 4 ; k += step) {
			final double tmp = work[(i + k)];
			work[(i + k)] = work[(j - k)];
			work[(j - k)] = tmp;
		}
		j -= 4;
	}
	return true;
} 
fixed statement= if ((1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])) {
	int j = (4 * n) - 1;
	for (int i = 0 ; i < j ; i += 4) {
		for (int k = 0 ; k < 4 ; k += step) {
			final double tmp = work[(i + k)];
			work[(i + k)] = work[(j - k)];
			work[(j - k)] = tmp;
		}
		j -= 4;
	}
	return true;
} 
generation= 1
ingredientScope= -
 
 ----
ProgramVariant 401
 
operation: INSERT_BEFORE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1133
original statement= if ((1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])) {
	int j = (4 * n) - 1;
	for (int i = 0 ; i < j ; i += 4) {
		for (int k = 0 ; k < 4 ; k += step) {
			final double tmp = work[(i + k)];
			work[(i + k)] = work[(j - k)];
			work[(j - k)] = tmp;
		}
		j -= 4;
	}
	return true;
} 
fixed statement= if (true)
	return false;

generation= 1
ingredientScope= -
 
 ----
ProgramVariant 403
 
operation: REPLACE
location= org.apache.commons.math.linear.EigenDecompositionImpl
line= 1133
original statement= if ((1.5 * (work[pingPong])) < (work[((4 * (n - 1)) + (pingPong))])) {
	int j = (4 * n) - 1;
	for (int i = 0 ; i < j ; i += 4) {
		for (int k = 0 ; k < 4 ; k += step) {
			final double tmp = work[(i + k)];
			work[(i + k)] = work[(j - k)];
			work[(j - k)] = tmp;
		}
		j -= 4;
	}
	return true;
} 
fixed statement= if (false) {
	int j = (4 * n) - 1;
	for (int i = 0 ; i < j ; i += 4) {
		for (int k = 0 ; k < 4 ; k += step) {
			final double tmp = work[(i + k)];
			work[(i + k)] = work[(j - k)];
			work[(j - k)] = tmp;
		}
		j -= 4;
	}
	return true;
} 
generation= 1
ingredientScope= -
 

----stats: 

spaces navigation: [0]: {}
#gen: 0
#patches: 12
#RightCompilation: 1686
#WrongCompilation: 332
#FailingTestCaseExecution: 1687
#RegressionTestExecution: 12
#TestcasesExecutedval1: 29790
#TestcasesExecutedval2: 23928
#FailingTestCase: 18
#RegressionTestCases: 1994
#OfAppliedOp: 0
#NotAppliedOp: 0
#InmutatedGen: 0
#unfinishValidation: 0
#ing {}
#untilcompile {}
Time Total(ms): 3156290


Node: griffon-73.nancy.grid5000.fr


Date: Thu Aug 13 19:57:17 CEST 2015


